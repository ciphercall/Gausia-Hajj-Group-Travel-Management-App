@using System.Data
@using System.Data.SqlClient
@using Travel.Models
@model Travel.Models.PageModel
@{
    ViewBag.Title = "Update";
    if (HttpContext.Current.Session["LoggedUserType"] == null)
    {
        Response.Redirect(Url.Action("Index", "Login"));
    }

    var LoggedUserTp = HttpContext.Current.Session["LoggedUserType"].ToString();
    var LoggedUserStatus = HttpContext.Current.Session["LoggedUserStatus"].ToString();
    var LoggedCompanyStatus = HttpContext.Current.Session["LoggedCompanyStatus"].ToString();

    if ((LoggedUserTp == "CompanyAdmin" || LoggedUserTp == "UserAdmin" || LoggedUserTp == "User") && LoggedUserStatus == "A" && LoggedCompanyStatus == "A")
    {

    }
    else
    {
        Response.Redirect(Url.Action("Index", "Login"));
    }

    Int64 compid = Convert.ToInt64(System.Web.HttpContext.Current.Session["loggedCompID"]);


    TravelDbContext db = new TravelDbContext();


    List<SelectListItem> transfor = new List<SelectListItem>();
    transfor.Add(new SelectListItem { Text = "RECEIVABLE", Value = "RECEIVABLE" });

    transfor.Add(new SelectListItem { Text = "PAYABLE", Value = "PAYABLE" });








}



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

  

      @Html.HiddenFor(model => model.refund.COMPID, new { @Value = compid })
    @Html.HiddenFor(model => model.refund.Id, new { id = "Hiddenprimaryid" })

    <div id="contentHeaderBox">



        @if (TempData["RefundMessage"] != null)
        {

            <h1 style="padding-left:16px">
                Refund Delete&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                @TempData["RefundMessage"]
            </h1>

        }
        else
        {
            <h1 style="padding-left:16px">
                Refund Delete
            </h1>
        }






        @if ((LoggedUserTp == "CompanyAdmin" || LoggedUserTp == "UserAdmin" || LoggedUserTp == "User") && LoggedUserStatus == "A")
        {
            var createStatus = "";
            var updateStatus = "";
            var deleteStatus = "";
            var status = "";
            var loggedUserID = HttpContext.Current.Session["loggedUserID"].ToString();
            System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["TravelDbContext"].ToString());

            string query1 = string.Format("SELECT STATUS, INSERTR, UPDATER, DELETER FROM ASL_ROLE WHERE  CONTROLLERNAME='Refund' AND COMPID='{0}' AND USERID = '{1}'", compid, loggedUserID);

            System.Data.SqlClient.SqlCommand cmd1 = new System.Data.SqlClient.SqlCommand(query1, conn);
            conn.Open();

            SqlDataAdapter da1 = new SqlDataAdapter(cmd1);
            DataTable ds1 = new DataTable();
            da1.Fill(ds1);

            foreach (DataRow row in ds1.Rows)
            {
                status = row["STATUS"].ToString();
                createStatus = row["INSERTR"].ToString();
                updateStatus = row["UPDATER"].ToString();
                deleteStatus = row["DELETER"].ToString();
            }
            conn.Close();

            <div class="btn-group pull-right" id="editOption">
                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" aria-expanded="false">
                    <i class="fa fa-cog"></i>
                </button>
                <ul class="dropdown-menu pull-right" style="" role="menu">
                    @if (createStatus == 'A'.ToString() && updateStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "Refund")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Update", "Refund")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Delete", "Refund")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                    else if (updateStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Update", "Refund")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Delete", "Refund")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                    else if (createStatus == 'A'.ToString() && updateStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "Refund")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Update", "Refund")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                    }
                    else if (createStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "Refund")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Delete", "Refund")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                    else if (createStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "Refund")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                    }
                    else if (updateStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Update", "Refund")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                    }
                    else if (deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Delete", "Refund")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                </ul>
            </div>

        }

    </div>
    <br />
    <div class="col-md-12">

        <div class="form-group">

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Transaction Date", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.refund.TRANSDT, htmlAttributes: new { id = "idTransDT", @class = "form-control",autofocus=true})
                    @*@Html.ValidationMessageFor(model => model.carrier.CARRIERSID, "length should be 2", new { @class = "text-danger" })*@
                </div>
                <div class="col-md-2">
                    @Html.Label("Month", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.refund.TRANSMY, htmlAttributes: new { id = "idTransMonth", @class = "form-control", @readonly = "readonly" })
                    @*@Html.ValidationMessageFor(model => model.carrier.CARRIERSID, "length should be 2", new { @class = "text-danger" })*@
                </div>
            </div>

            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Serial No", htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.refund.TRANSNO, new SelectList(string.Empty, "Value", "Text"), "--Select--", htmlAttributes: new { id = "idTransNO", @class = "form-control" })

                </div>


            </div>
            <hr />
            <div class="row">

                <div class="col-md-2">
                    @Html.Label("Cost Pool Group", htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.AGlCostPMST.COSTCNM, htmlAttributes: new { id = "idCostcid", @class = "form-control", @readonly = "readonly" })

                </div>
                <div class="col-md-2">
                    @Html.Label("Effect Head", htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.AGlCostPool.COSTPNM, htmlAttributes: new { id = "idCardpid", @class = "form-control", @readonly = "readonly" })

                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Account Head", htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.AGL_acchart.ACCOUNTNM, htmlAttributes: new { id = "idAccountcd", @class = "form-control", @readonly = "readonly" })

                </div>


            </div>
            <br />

            <div class="row">
                <div class="col-md-2">
                    @Html.Label("Card No", htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.passenger.CARDNO, new SelectList(string.Empty, "Value", "Text"), "--Select--", htmlAttributes: new { id = "idCardNo", @class = "form-control", @readonly = "readonly" })

                </div>
                <div class="col-md-2">
                    @Html.Label("Passenger Name", htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.passenger.PSGRNM, htmlAttributes: new { id = "idPassenger", @class = "form-control", @readonly = "readonly" })

                </div>


            </div>
            <br />


            <div class="row">

                <div class="col-md-2">
                    @Html.Label("Ticket No", htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.refund.TICKETNO, new SelectList(string.Empty, "Value", "Text"), "--Select--", htmlAttributes: new { id = "idTickNo", @class = "form-control", @readonly = "readonly" })

                </div>
                <div class="col-md-2">
                    @Html.Label("Ticket Date", htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.refund.TICKETDT, htmlAttributes: new { id = "idTicDT", @class = "form-control", @readonly = "readonly" })

                </div>
            </div>
            <br />
            <div class="row">

                <div class="col-md-2">
                    @Html.Label("Buy(Supplier)", htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.refund.BUYAMTS, htmlAttributes: new { id = "idBuyAmount", @class = "form-control", @readonly = "readonly" })

                </div>
                <div class="col-md-2">
                    @Html.Label("Sale(Passenger)", htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.refund.SALAMTT, htmlAttributes: new { id = "idSaleAmount", @class = "form-control", @readonly = "readonly" })

                </div>
            </div>
            <br />
            <div class="row">

                <div class="col-md-2">
                    @Html.Label("Refund(Supplier)", htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.refund.REFUNDS, htmlAttributes: new { id = "idRefundS", @class = "form-control", @readonly = "readonly" })

                </div>
                <div class="col-md-2">
                    @Html.Label("Refund(Passenger)", htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.refund.REFUNDT, htmlAttributes: new { id = "idRefundT", @class = "form-control", @readonly = "readonly" })

                </div>

            </div>
            <br />
            <div class="row">

                <div class="col-md-2">
                    @Html.Label("Deduction(Supplier)", htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.refund.DEDAMTS, htmlAttributes: new { id = "iddeductionS", @class = "form-control", @readonly = "readonly" })

                </div>
                <div class="col-md-2">
                    @Html.Label("Deduction(Passenger)", htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.refund.DEDAMTT, htmlAttributes: new { id = "iddeductionT", @class = "form-control", @readonly = "readonly" })

                </div>

            </div>
            <br />
            <div class="row">


                <div class="col-md-2">
                    @Html.Label("Remarks", htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.refund.REMARKS, htmlAttributes: new { id = "idRemarks", @class = "form-control", @readonly = "readonly" })

                </div>

            </div>


            @Html.TextBoxFor(model => model.refund.INSLTUDE, new { id = "latlon", style = "display: none;" })
            <input id="lat" type="hidden" />
            <input id="lon" type="hidden" />

            <br />
            <div class="row">
                <div class="col-md-3"></div>
                <div class="col-md-3">
                    <input type="submit" class="btn btn-primary btn-block" value="Delete" name="command" />
                </div>
               
            </div>
        </div>
    </div>











    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <script language="javascript" type="text/javascript">
        $(function () {
            navigator.geolocation.getCurrentPosition(showPosition);

            function showPosition(position) {
                var coordinates = position.coords;
                $("#lat").val(coordinates.latitude);
                $("#lon").val(coordinates.longitude);

                $("#latlon").val(
                    $("#lat").val() + "," + $("#lon").val()
                );
            }
            //function positionError(position) {
            //    alert("!!! Error: "+position.code);
            //}
        });
    </script>

    <script type="text/javascript">
        $(document).ready(function () {
            $(function () {
                $("#idTransDT").datepicker({ dateFormat: 'dd-M-yy', changeYear: true });
            });


            $('#idTransDT').change(function () {

                var changedtxt = $('#idTransDT').val();


                var txttransYear = document.getElementById('idTransMonth');
                //var txttransNo = document.getElementById('idTransNO');

                $("#idTransMonth").val(" ");

                $("#idTransNO").val(" ");

                $.getJSON(
                    "/Refund/DateChanged_getMonth", { "Changedtxt": changedtxt },
                    function (myData) {
                        txttransYear.value = myData.month;





                        document.getElementById("idCardCID").focus();
                    });

                $.ajax({
                    url: '@Url.Action("TransNoLoad", "Refund")',
                    type: 'post',
                    dataType: "json",
                    data: { type: changedtxt },
                    success: function (data) {
                        $("#idTransNO").empty();

                        $("#idTransNO").append('<option value="'
                            + '">'
                            + "--Select--" + '</option>');



                        $.each(data, function (i, memo) {

                            $("#idTransNO").append('<option value="'
                                + memo.Value + '">'
                                + memo.Text + '</option>');




                        });

                    }
                });

            });
           
            $('#idTransNO').change(function () {


                var changedtxt = $('#idTransNO').val();
                var txtprimarykey = document.getElementById('Hiddenprimaryid');
                var txtcostHead = document.getElementById('idCostcid');
                var txtaccountNM = document.getElementById('idAccountcd');
                var txtEffecHead = document.getElementById('idCardpid');
                // var txtcardNo = document.getElementById('idCardNo');
                var txtPassengernm = document.getElementById('idPassenger');
                //var txtTicketno = document.getElementById('idTickNo');
                var txtTicketDt = document.getElementById('idTicDT');
                var txtBuyamount = document.getElementById('idBuyAmount');
                var txtSaleamount = document.getElementById('idSaleAmount');
                var txtRefundS = document.getElementById('idRefundS');
                var txtRefundT = document.getElementById('idRefundT');
                var txtdeductionS = document.getElementById('iddeductionS');
                var txtdeductionT = document.getElementById('iddeductionT');
                var txtRemarks = document.getElementById('idRemarks');



                $.getJSON(
                    "/Refund/Update_SelectTransNo", { "Changedtxt": changedtxt },
                    function (myData) {
                        txtprimarykey.value = myData.keyid;

                        txtcostHead.value = myData.costhead;
                        txtaccountNM.value = myData.accountname;
                        txtEffecHead.value = myData.effecthead;
                        // txtcardNo.value = myData.b;


                        txtPassengernm.value = myData.passengername;
                        //txtTicketno.value = myData.a;
                        txtTicketDt.value = myData.ticketdate;
                        txtBuyamount.value = myData.buyamount;

                        txtSaleamount.value = myData.saleamount;



                        txtRefundS.value = myData.refunds;
                        txtRefundT.value = myData.refundst;
                        txtdeductionS.value = myData.deductions;
                        txtdeductionT.value = myData.deductiont;
                        txtRemarks.value = myData.Remarks;


                        var txtcardNo = $('#idCardNo');
                        txtcardNo.empty();
                        //$("#idCardNo").append('<option value="'
                        //    + "select" + '">'
                        //    + "select" + '</option>');
                        $(myData).each(function () {
                            $(document.createElement('option'))
                                .attr('value', this.b)
                                .text(this.b)
                                .appendTo(txtcardNo);
                        });

                        var txtTicketno = $('#idTickNo');
                        txtTicketno.empty();

                        $(myData).each(function () {
                            $(document.createElement('option'))
                                .attr('value', this.a)
                                .text(this.a)
                                .appendTo(txtTicketno);
                        });
                        //$("#textBoxID").attr("readonly");

                    });

            });


        });
   
        

        
    </script>



}


<link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />

<script src="~/Scripts/jquery-1.9.1.min.js"></script>
<script src="~/Scripts/jquery-ui-1.10.4.min.js"></script>


<script src="~/Scripts/Underscore.js"></script>
